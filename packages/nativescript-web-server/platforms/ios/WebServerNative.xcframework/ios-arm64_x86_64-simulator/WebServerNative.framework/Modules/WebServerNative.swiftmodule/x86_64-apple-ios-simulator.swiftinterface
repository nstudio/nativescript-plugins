// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name WebServerNative
import Foundation
import Swift
@_exported import WebServerNative
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc(NSCServerStatus) public enum NSCServerStatus : Swift.Int, Swift.RawRepresentable {
  public typealias RawValue = Swift.Int
  case Inactive
  case Active
  case Crashed
  case Starting
  case Stopping
  public init?(rawValue: Swift.Int)
  public var rawValue: WebServerNative.NSCServerStatus.RawValue {
    get
  }
}
@objcMembers @objc(NSCServer) public class NSCServer : ObjectiveC.NSObject {
  @objc public init(_ logger: Swift.Bool, _ path: Swift.String, _ directory: Swift.String, _ index: Swift.String?, _ hostName: Swift.String?, _ port: Swift.Int16, _ workers: Swift.UInt32, _ showFiles: Swift.Bool)
  @objc deinit
  @objc public var status: WebServerNative.NSCServerStatus {
    @objc get
  }
  @objc public func setStatusChangeCallback(_ callback: ((WebServerNative.NSCServerStatus) -> Swift.Void)?)
  @objc public func start(_ callback: @escaping (Swift.String?) -> Swift.Void)
  @objc public func stop(_ wait: Swift.Bool, _ callback: @escaping (Swift.String?) -> Swift.Void)
}
extension WebServerNative.NSCServerStatus : Swift.Equatable {}
extension WebServerNative.NSCServerStatus : Swift.Hashable {}
